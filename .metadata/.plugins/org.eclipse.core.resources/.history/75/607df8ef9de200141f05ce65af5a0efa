import java.util.LinkedList;
import java.util.Queue;

public class BFS {

	int amountOfWords;
	int secondWord;
	int firstWord;
	LinkedList<Integer>[] adj;
	LinkedList<Integer> temp;
	Queue<Integer>[] levelList;
	boolean[] discovered;

	Queue<Integer> currentLevelList;

	public int run(LinkedList<Integer>[] adj, int firstWord, int secondWord,
			int amountOfWords) {
		int countLevel = -1;
		levelList = new LinkedList[10];
		discovered = new boolean[amountOfWords];
		levelList[0].offer(firstWord);
		int distance = 0;
		while (!levelList[countLevel].isEmpty()) {
			currentLevelList = levelList[countLevel];
			while (currentLevelList.isEmpty()) {
				int currentNode = currentLevelList.poll();
				if (currentNode == secondWord)
					return distance = countLevel + 1;

				if (!discovered[currentNode]) {
					discovered[currentNode] = true;
					levelList[countLevel + 1].offer(currentNode);
				}
			}
			countLevel++;
		}
		return distance;
	}
}
