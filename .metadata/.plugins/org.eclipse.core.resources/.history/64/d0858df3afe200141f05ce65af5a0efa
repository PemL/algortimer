import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Lab2 {
	LinkedList<Integer>[] adj;
	Graph graph;
	BFS bfs;
	int firstWord;
	int secondWord;
	int nbrOfSteps;
	int amountOfWords;
	int countDistanceWordPosition = 0;
	String[] word;
	Queue<Integer> comparingWords;

	HashMap<String, Integer> map;

	public static void main(String arg[]) throws IOException {
		new Lab2().run(arg[0], arg[1]);

	}

	public void run(String fileNameWords, String fileNameWordDistance)
			throws IOException {
		Scanner sc = new Scanner(new FileInputStream(fileNameWords));
		amountOfWords = Integer.parseInt(fileNameWords.replaceAll("[\\D]", ""));
		map = new HashMap<String, Integer>(amountOfWords);
		int count = 0;
		word = new String[amountOfWords];
		while (sc.hasNext()) {
			String currentString = sc.nextLine();
			map.put(currentString, count);
			word[count] = currentString;
			count++;
		}

		// read first-last word input and insert to an array and hashmap
		Scanner sc2 = new Scanner(new FileInputStream(fileNameWordDistance));
		String[] currentString;
		comparingWords = new LinkedList<Integer>();
		while (sc2.hasNext()) {
			currentString = sc2.nextLine().split(" ");
			comparingWords.offer(map.get(currentString[0]));
			comparingWords.offer(map.get(currentString[1]));
		}
		
		start();
	}

	public void start() {
		graph = new Graph();
		bfs = new BFS();
		adj = graph.run(word);

		while (!comparingWords.isEmpty()) {
			firstWord = comparingWords.poll();
			secondWord = comparingWords.poll();
			 nbrOfSteps = bfs.run(adj, firstWord, secondWord, amountOfWords);
			System.out.println(nbrOfSteps);
		}
	}


}
